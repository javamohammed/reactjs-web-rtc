{"version":3,"sources":["App.js","index.js"],"names":["App","props","componentDidMount","socket","io","path","query","on","success","console","log","sdp","textref","value","JSON","stringify","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","RTCPeerConnection","urls","onicecandidate","e","sendToPeer","oniceconnectionstatechange","onaddstream","remoteVideoref","current","srcObject","stream","navigator","mediaDevices","getUserMedia","audio","video","then","window","localStream","localVideoref","addStream","catch","messageType","payload","emit","socketID","id","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","desc","parse","addCandidate","candidates","forEach","React","createRef","style","width","height","margin","backgroundColor","ref","this","autoPlay","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"6QA4NeA,E,kDAxNb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IASRC,kBAAoB,WAElB,EAAKC,OAASC,IACZ,cACA,CACEC,KAAM,UACNC,MAAO,KAIX,EAAKH,OAAOI,GAAG,sBAAsB,SAAAC,GACnCC,QAAQC,IAAIF,MAGd,EAAKL,OAAOI,GAAG,iBAAiB,SAACI,GAC/B,EAAKC,QAAQC,MAAQC,KAAKC,UAAUJ,GAGpC,EAAKK,GAAGC,qBAAqB,IAAIC,sBAAsBP,OAGzD,EAAKR,OAAOI,GAAG,aAAa,SAACY,GAG3B,EAAKH,GAAGI,gBAAgB,IAAIC,gBAAgBF,OAoB9C,EAAKH,GAAK,IAAIM,kBAfI,CAChB,WAAc,CAMZ,CACEC,KAAO,mCAUb,EAAKP,GAAGQ,eAAiB,SAACC,GAGpBA,EAAEN,WAEJ,EAAKO,WAAW,YAAaD,EAAEN,YAKnC,EAAKH,GAAGW,2BAA6B,SAACF,GACpChB,QAAQC,IAAIe,IAId,EAAKT,GAAGY,YAAc,SAACH,GACrB,EAAKI,eAAeC,QAAQC,UAAYN,EAAEO,QA+B5CC,UAAUC,aAAaC,aAbH,CAClBC,OAAO,EACPC,OAAO,IAYNC,MA3Ba,SAACN,GACfO,OAAOC,YAAcR,EACrB,EAAKS,cAAcX,QAAQC,UAAYC,EACvC,EAAKhB,GAAG0B,UAAUV,MAyBjBW,OArBa,SAAClB,GACfhB,QAAQC,IAAI,uBAAwBe,OAtFtB,EA8GlBC,WAAa,SAACkB,EAAaC,GACzB,EAAK1C,OAAO2C,KAAKF,EAAa,CAC5BG,SAAU,EAAK5C,OAAO6C,GACtBH,aAjHc,EAuHlBI,YAAc,WACZxC,QAAQC,IAAI,SAIZ,EAAKM,GAAGiC,YAAY,CAAEC,oBAAqB,IACxCZ,MAAK,SAAA3B,GACLF,QAAQC,IAAII,KAAKC,UAAUJ,IAG1B,EAAKK,GAAGmC,oBAAoBxC,GAE5B,EAAKe,WAAW,gBAAiBf,OAnIrB,EAyIlByC,aAAe,WACb3C,QAAQC,IAAI,UACZ,EAAKM,GAAGoC,aAAa,CAAEF,oBAAqB,IACzCZ,MAAK,SAAA3B,GAIJ,EAAKK,GAAGmC,oBAAoBxC,GAE5B,EAAKe,WAAW,gBAAiBf,OAlJrB,EAsJlBM,qBAAuB,WAErB,IAAMoC,EAAOvC,KAAKwC,MAAM,EAAK1C,QAAQC,OAGrC,EAAKG,GAAGC,qBAAqB,IAAIC,sBAAsBmC,KA3JvC,EA8JlBE,aAAe,WAQb,EAAKC,WAAWC,SAAQ,SAAAtC,GACtBV,QAAQC,IAAII,KAAKC,UAAUI,IAC3B,EAAKH,GAAGI,gBAAgB,IAAIC,gBAAgBF,QAtK9C,EAAKsB,cAAgBiB,IAAMC,YAC3B,EAAK9B,eAAiB6B,IAAMC,YAE5B,EAAKxD,OAAS,KACd,EAAKqD,WAAa,GANF,E,qDA4KT,IAAD,OAGN,OACE,6BACE,2BACEI,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,OAAQ,EACRC,gBAAiB,SAEnBC,IAAMC,KAAKzB,cACX0B,UAAQ,IAEV,2BACEP,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,OAAQ,EACRC,gBAAiB,SAEnBC,IAAMC,KAAKrC,eACXsC,UAAQ,IAEV,6BAEA,4BAAQC,QAASF,KAAKjB,aAAtB,SACA,4BAAQmB,QAASF,KAAKd,cAAtB,UAEA,6BACA,8BAAUQ,MAAO,CAAEC,MAAO,IAAKC,OAAO,IAAMG,IAAK,SAAAA,GAAS,EAAKrD,QAAUqD,U,GA5M/DI,aCClBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.f8d06d86.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport io from 'socket.io-client'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.localVideoref = React.createRef()\n    this.remoteVideoref = React.createRef()\n\n    this.socket = null\n    this.candidates = []\n  }\n  \n\n  componentDidMount = () => {\n\n    this.socket = io(\n      '/webrtcPeer',\n      {\n        path: '/webrtc',\n        query: {}\n      }\n    )\n\n    this.socket.on('connection-success', success => {\n      console.log(success)\n    })\n\n    this.socket.on('offerOrAnswer', (sdp) => {\n      this.textref.value = JSON.stringify(sdp)\n\n      // set sdp as remote description\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n    })\n\n    this.socket.on('candidate', (candidate) => {\n      // console.log('From Peer... ', JSON.stringify(candidate))\n      // this.candidates = [...this.candidates, candidate]\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    })\n\n    // const pc_config = null\n\n    const pc_config = {\n      \"iceServers\": [\n        // {\n        //   urls: 'stun:[STUN_IP]:[PORT]',\n        //   'credentials': '[YOR CREDENTIALS]',\n        //   'username': '[USERNAME]'\n        // },\n        {\n          urls : 'stun:stun.l.google.com:19302'\n        }\n      ]\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    // create an instance of RTCPeerConnection\n    this.pc = new RTCPeerConnection(pc_config)\n\n    // triggered when a new candidate is returned\n    this.pc.onicecandidate = (e) => {\n      // send the candidates to the remote peer\n      // see addCandidate below to be triggered on the remote peer\n      if (e.candidate) {\n        // console.log(JSON.stringify(e.candidate))\n        this.sendToPeer('candidate', e.candidate)\n      }\n    }\n\n    // triggered when there is a change in connection state\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e)\n    }\n\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n    this.pc.onaddstream = (e) => {\n      this.remoteVideoref.current.srcObject = e.stream\n    }\n\n    // called when getUserMedia() successfully returns - see below\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n    const success = (stream) => {\n      window.localStream = stream\n      this.localVideoref.current.srcObject = stream\n      this.pc.addStream(stream)\n    }\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log('getUserMedia Error: ', e)\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    // see the above link for more constraint options\n    const constraints = {\n      audio: false,\n      video: true,\n      // video: {\n      //   width: 1280,\n      //   height: 720\n      // },\n      // video: {\n      //   width: { min: 1280 },\n      // }\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(success)\n      .catch(failure)\n    \n\n  }\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    })\n  }\n\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\n\n  createOffer = () => {\n    console.log('Offer')\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n       console.log(JSON.stringify(sdp))\n\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp)\n\n        this.sendToPeer('offerOrAnswer', sdp)\n    })\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n  // creates an SDP answer to an offer received from remote peer\n  createAnswer = () => {\n    console.log('Answer')\n    this.pc.createAnswer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        // console.log(JSON.stringify(sdp))\n\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp)\n\n        this.sendToPeer('offerOrAnswer', sdp)\n    })\n  }\n\n  setRemoteDescription = () => {\n    // retrieve and parse the SDP copied from the remote peer\n    const desc = JSON.parse(this.textref.value)\n\n    // set sdp as remote description\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n  }\n\n  addCandidate = () => {\n    // retrieve and parse the Candidate copied from the remote peer\n    // const candidate = JSON.parse(this.textref.value)\n    // console.log('Adding candidate:', candidate)\n\n    // add the candidate to the peer connection\n    // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n\n    this.candidates.forEach(candidate => {\n      console.log(JSON.stringify(candidate))\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    });\n  }\n\n  render(){\n   \n    \n    return (\n      <div>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          ref={ this.localVideoref }\n          autoPlay>\n        </video>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          ref={ this.remoteVideoref }\n          autoPlay>\n        </video>\n        <br />\n\n        <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n\n        <br />\n        <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\n\n        {/* <br />\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>Add Candidate</button> */}\n      </div>\n    )\n  }\n\n\n  }\n\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}